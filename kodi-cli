#!/bin/bash
## Author: Nawar 
## License: GPL (c) 2014
##
## Note:
## This script used the youtube code of:
## 	YouTube XBMC Script 1.0
## 	(c) 2013, Tom Laermans - http://tom.laermans.net
## 	This script is released into the public domain.
##
## Volume control and more details added by elPraga
## using the command found at http://forum.kodi.tv/showthread.php?tid=176795
 
## Configure your KODI RPC details here
#set -x
 
KODI_HOST=
KODI_PORT=8080
KODI_USER=
KODI_PASS=
LOCK=false

function xbmc_req {
  output=$(curl -s -i -X POST --header "Content-Type: application/json" -d "$1" http://$KODI_USER:$KODI_PASS@$KODI_HOST:$KODI_PORT/jsonrpc)  

  if [[ $2 = true ]];
  then
	  echo $output
  fi 
}

function parse_json {
 key=$1
 awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/'$key'\042/){print $(i+1)}}}' | tr -d '"' 
}
 
function play_youtube {

  REGEX="^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*"
  
  ID=$1
  
  if [ "$ID" == "" ];
  then
  	echo "Syntax $0:$1 <id|url>"
  	exit
  fi
  
  if [[ $ID =~ $REGEX ]]; then
  	ID=${BASH_REMATCH[7]}
  fi
  
  echo -n "Opening video id $ID on $KODI_HOST ..."

  # clear the list
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Clear", "params":{"playlistid":1}, "id": 1}';

  # add the video to the list
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Add", "params":{"playlistid":1, "item" :{ "file" : "plugin://plugin.video.youtube/?action=play_video&videoid='$ID'"}}, "id" : 1}';

  # open the video
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Open", "params":{"item":{"playlistid":1, "position" : 0}}, "id": 1}';

  echo " done."
}

function queue_yt_videos {

  REGEX="^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*"
  
  ID=$1
  
  if [ "$ID" == "" ];
  then
  	echo "Syntax $0:$1 <id|url>"
  	exit
  fi
  
  if [[ $ID =~ $REGEX ]]; then
  	ID=${BASH_REMATCH[7]}
  fi

  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.GetItems", "params":{"playlistid":1}, "id": 99}' true`
  numberitems=`echo $output | parse_json "total"`
  
  # add the video to the list
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Add", "params":{"playlistid":1, "item" :{ "file" : "plugin://plugin.video.youtube/?action=play_video&videoid='$ID'"}}, "id" : 1}';
  
  echo -n "Video $ID added. There're ($numberitems) items in the playlist on $KODI_HOST."
}

function play_pause {
  # Get Active players first
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id": 99}' true`
  player_id=`echo $output | parse_json "playerid"` 
  echo "Pausing/Playing the player with ID => $player_id"
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.PlayPause", "params": { "playerid": '$player_id' }, "id": 1}' 
}

function stop {
  # Get Active players first
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id": 99}' true`
  player_id=`echo $output | parse_json "playerid"` 
  echo "Stopping the player with ID => $player_id"
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Stop", "params": { "playerid": '$player_id' }, "id": 1}'
}

function send_text {
  echo "Sending the text"
  xbmc_req '{"jsonrpc": "2.0", "method": "Input.SendText", "params": { "text": "'$1'" }}'
}

function press_key {

  ACTION=''
  CLR="\e[K"

  case "$1" in
          k) ACTION='Up'
                  echo -ne "\rUp$CLR";
                  ;;
          A) ACTION='Up'
                  echo -ne "\rUp$CLR";
                  ;;
          j) ACTION='Down'
                  echo -ne "\rDown$CLR";
                  ;;
          B) ACTION='Down'
                  echo -ne "\rDown$CLR";
                  ;;
          l) ACTION='Right'
                  echo -ne "\rRight$CLR";
                  ;;
          C) ACTION='Right'
                  echo -ne "\rRight$CLR";
                  ;;
          h) ACTION='Left'
                  echo -ne "\rLeft$CLR";
                  ;;
          D) ACTION='Left'
                  echo -ne "\rLeft$CLR";
		  ;;
	  c) ACTION='ContextMenu'
		  echo -ne "\rContext Menu$CLR";
		  ;;
	  i) ACTION='Info'
		  echo -ne "\rInformation$CLR";
		  ;;
	  $'\177') ACTION='Back'
		  echo -ne "\rBack$CLR";
		  ;;
	  "") ACTION='Select'
		  echo -ne "\rSelect$CLR";
		  ;;
          f) ACTION='Fullscreen'
                  echo -ne "\rToggle Fullscreen$CLR";
                  ;;
          u) ACTION='Volume up'
                  echo -ne "\rVolume up$CLR";
                  ;;
          d) ACTION='Volume down'
                  echo -ne "\rVolume down$CLR";
                  ;;
          s) ACTION='Stop'
                  echo -ne "\rStopping playback$CLR";
                  ;;
          p) ACTION='Pause'
                  echo -ne "\rPause / Play$CLR";
                  ;;
  	  n) ACTION='Play next'
		  echo -ne "\rPlay next$CLR";
		  ;;
  esac

  if [[ "$ACTION" != " " ]] && [[ $LOCK == false  ]]
  then
        if [[ "$ACTION" == "Fullscreen" ]] && [[ $LOCK == false  ]]
        then
                LOCK=true
                xbmc_req '{ "jsonrpc": "2.0", "method": "GUI.SetFullscreen", "params": { "fullscreen": "toggle" }, "id": 1 }'
                LOCK=false
        fi
        if [[ "$ACTION" == "Volume up" ]] && [[ $LOCK == false  ]]
        then
                LOCK=true
                xbmc_req '{ "jsonrpc": "2.0", "method": "Application.SetVolume", "params": { "volume": "increment" }, "id": 1 }'
                LOCK=false
        fi
        if [[ "$ACTION" == "Volume down" ]] && [[ $LOCK == false  ]]
        then
                LOCK=true
                xbmc_req '{ "jsonrpc": "2.0", "method": "Application.SetVolume", "params": { "volume": "decrement" }, "id": 1 }'
                LOCK=false
        fi
        if [[ "$ACTION" == "Stop" ]] && [[ $LOCK == false  ]]
        then
                LOCK=true
                output=`xbmc_req '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id": 99}' true`
                player_id=`echo $output | parse_json "playerid"`
                xbmc_req '{"jsonrpc": "2.0", "method": "Player.Stop", "params": { "playerid": '$player_id' }, "id": 1}'
                LOCK=false
        fi
        if [[ "$ACTION" == "Pause" ]] && [[ $LOCK == false  ]]
        then
                LOCK=true
                output=`xbmc_req '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id": 99}' true`
                player_id=`echo $output | parse_json "playerid"`
                xbmc_req '{"jsonrpc": "2.0", "method": "Player.PlayPause", "params": { "playerid": '$player_id' }, "id": 1}'
                LOCK=false
        fi
	if [[ "$ACTION" == "Play next" ]] && [[ $LOCK == false  ]]
  	then
		LOCK=true
		xbmc_req '{"jsonrpc":"2.0",  "id": "libSeek", "method": "Player.Seek", "params": {"playerid": 1, "value": '99.9999' }}'
		LOCK=false
	fi 
	LOCK=true
	xbmc_req '{"jsonrpc": "2.0", "method": "Input.'$ACTION'"}'
	LOCK=false
  fi
}

function handle_keys {
echo "Interactive navigation key: ";
while :
do
	read  -s -n1 key

	if [[ $key = q ]]
	then
		break
	elif [[ $key != ' ' ]]
	then
		press_key "$key" 
	fi
done
}

## added by Tomas,to control volume code taken from http://forum.kodi.tv/showthread.php?tid=176795 
function volume_up {
  echo "Incrementing volume"
  xbmc_req '{ "jsonrpc": "2.0", "method": "Application.SetVolume", "params": { "volume": "increment" }, "id": 1 }' 
}

function volume_down {
  echo "Decrementing volume on"
  xbmc_req '{ "jsonrpc": "2.0", "method": "Application.SetVolume", "params": { "volume": "decrement" }, "id": 1 }' 
}

function fullscreen_toggle {
  # Get Active players first
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id": 99}' true`
  player_id=`echo $output | parse_json "playerid"`
  echo "Toggle fullscreen on the player with ID => $player_id"
  xbmc_req '{ "jsonrpc": "2.0", "method": "GUI.SetFullscreen", "params": { "fullscreen": "toggle" }, "id": 1 }'
}

function retreive_percentage {
  # http://forum.kodi.tv/showthread.php?tid=171901&highlight=position
  # Get the percentage of currently playing video / audio
  #output=`xbmc_req '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id": 99}' true`
  output=`xbmc_req '{ "jsonrpc": "2.0", "method": "Player.GetProperties", "params":{"playerid":1,"properties":["percentage"]}, "id": 1 }' true`
  # check the raw output
  #echo $output
  percentage=`echo $output | parse_json "percentage"` 
  # check the percentaget we got
  echo $percentage
}

function jump_back {
        # Jump back given ammount of seconds. Useful for learning languages.
        output=`xbmc_req '{ "jsonrpc": "2.0", "method": "Player.GetProperties", "params":{"playerid":1,"properties":["time"]}, "id": 1 }' true`
        hours=`echo $output | parse_json "hours"`
        minutes=`echo $output | parse_json "minutes"`
        seconds=`echo $output | parse_json "seconds"`
        seconds=`echo $seconds |cut -f 2 -d " "`
        current_seconds=$(($seconds+60*$minutes+60*60*$hours))
        #echo current seconds: $current_seconds
        output=`xbmc_req '{ "jsonrpc": "2.0", "method": "Player.GetProperties", "params":{"playerid":1,"properties":["percentage"]}, "id": 1 }' true`
        # check the raw output
        #echo $output
        percentage=`echo $output | parse_json "percentage"`
        # check the percentage we got
        #echo current percentage $percentage
        echo Jumping $1 seconds back...
        #echo
        one_second=$(python -c "print $percentage/$current_seconds")
        jump_value_percentage=$(python -c "print $one_second*$1")
        jump_to_percentage=$(python -c "print $percentage-$jump_value_percentage")
        xbmc_req '{"jsonrpc":"2.0",  "id": "libSeek", "method": "Player.Seek", "params": {"playerid": 1, "value": '$jump_to_percentage' }}'
}

function go_to_percentage {
  # http://forum.kodi.tv/showthread.php?tid=68263&page=201
  # using $1 as it is the first argument for this function
  # values as 55.5 are also accepted
  xbmc_req '{"jsonrpc":"2.0",  "id": "libSeek", "method": "Player.Seek", "params": {"playerid": 1, "value": '$1' }}'
  
  output=`xbmc_req '{ "jsonrpc": "2.0", "method": "Player.GetProperties", "params":{"playerid":1,"properties":["time"]}, "id": 1 }' true`
  # check the raw output
  #echo $output
  hours=`echo $output | parse_json "hours"`
  minutes=`echo $output | parse_json "minutes"`
  seconds=`echo $output | parse_json "seconds"`
  ## Let's check the output
  #echo "minutes: $minutes"
  #echo "second: $seconds"
  seconds=`echo $seconds |cut -f 2 -d " "`
  # let's add a leading zero (seconds 1-9 don't have the leading zero)
  seconds=`echo 0$seconds`
  # and let's stick with just two digits
  # http://stackoverflow.com/questions/19858600/bash-accessing-last-x-characters-of-string
  seconds=${seconds: -2}
  # let's add a leading zero to minutes as well (minutes 1-9 don't have the leading zero)
  minutes=`echo 0$minutes`
  # and let's stick with just two digits
  # http://stackoverflow.com/questions/19858600/bash-accessing-last-x-characters-of-string
  minutes=${minutes: -2}
  echo "Playing from $hours:$minutes:$seconds"
}

function play_next_in_playlist {
  # http://forum.kodi.tv/showthread.php?tid=68263&page=201
  # this is a quick and somewhat dirty hack to play next item in the playlist
  # I still did not figure out how to do it properly, so instead I seek to the very end of the current item
  xbmc_req '{"jsonrpc":"2.0",  "id": "libSeek", "method": "Player.Seek", "params": {"playerid": 1, "value": '99.9999' }}'
  
  echo "Playing next item in playlist..."
}

function system_suspend {
  xbmc_req '{"jsonrpc": "2.0", "method": "System.Suspend", "id":1}'

  echo "Suspendig the system" 
}

function quit_xbmc {
  xbmc_req '{"jsonrpc":"2.0","method":"Application.Quit","id":1}'

  echo "Exiting XBMC"
}

function show_help {

echo -e "\n kodi-cli -[p|i|h|s|y youtbe URL/ID|t 'text to send']\n\n" \
	"-d Decrement the volume on Kodi\n" \
     	"-f toggle fullscreen\n" \
    	"-g go to specified percentage of the video\n" \
	"-h showing this help message\n" \
	"-i interactive navigation mode. Accept keyboard keys of Up, Down, Left, Right, Back, hjkl (vim-like)\n" \
	"   (c)Context menu, (i)Information, (f)Toggle Fullscreen, (u)Volume Up, (d)Volume Down, (s)Stop, and (p)Pause\n" \
	"   Play (n)next item of the playlist" \
	"-j jump back given # of seconds\n" \
	"-n play next item in current playlist\n" \
    	"-o play youtube video directly on Kodi, use the name of video (this option depends on using mps-youtube)\n" \
	"-p Play/Pause the current played video\n" \
	"-q queue youtube video to the current list, use either URL or ID (of video); use instead of -y\n" \
	"-r retreive the percentage of the total time that has been played already\n" \
	"-s stop the playback\n" \
	"-t 'text to send'\n" \
	"-u increment the volume on Kodi\n" \
        "-x exit XBMC" \
	"-y play youtube video; use either URL or ID (of video)\n" \
	"-z suspend the system with Kodi\n" 
}

## Process command line arguments
while getopts "yqopstiudfrgjnxzh" opt; do
        case $opt in
		y)
			#play youtube video
			play_youtube $2	
                        ;;
		q)
			#queue youtube video
			queue_yt_videos $2	
                        ;;
		o)
			#play youtube video directly
			#this depends on using mps-youtube
			play_youtube `mpsyt /$2, i 1, q | grep -i link | awk -F 'v=' '{ print $2 }'`
                        ;;
                p)
			play_pause	
                        ;;
		s) 
			stop
			;;
		t)	send_text $2
			handle_keys
			;;
		i)
			handle_keys	
			;;
		u)
			volume_up
			;;
		d)
			volume_down 
			;;
		f)
			fullscreen_toggle 
			;;
		r)
			retreive_percentage 
			;;
		g)
			go_to_percentage $2
			;;
                j)
                        jump_back $2
                        ;;
		n)
			play_next_in_playlist
			;;
                x)
                        quit_xbmc
                        ;;
		z)
			system_suspend
			;;
		h)
			show_help		
			;;
        esac
done
